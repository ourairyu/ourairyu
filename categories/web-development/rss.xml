<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    
    
    

    <title>「网站开发」类别的文章 - 欧雷流</title>
    <description>利用网页程序语言等技术进行网站和网络应用的开发与维护</description>
    <link>https://ourai.ws/categories/web-development/</link>
    <atom:link href="https://ourai.ws/categories/web-development/rss.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Mar 2025 23:51:25 +0800</pubDate>
    <lastBuildDate>Sun, 09 Mar 2025 23:51:25 +0800</lastBuildDate>
    <language>zh-CN</language>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>对前端同行的最后一次劝诫</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;不知为啥，我有那种有点无法自控的爱管闲事儿的臭毛病，因而在有的微信群中把自己群昵称改成了「热心网友」。&lt;/p&gt;

&lt;p&gt;最近有些同行在找工作，刷八股文，问某种面试题该怎么回答，诸如此类。&lt;/p&gt;

&lt;p&gt;看到他们那样，我心里就急得上蹿下跳的——明明前方是火坑，咋还接二连三看似心甘情愿地往里跳呢？？？&lt;/p&gt;

&lt;p&gt;在当下这个时间点，我的同行绝大部分是以 HTML、CSS、JavaScript 等为核心的「Web 前端」，他们之中绝大部分是业务前端，这些人中绝大部分做中后台类应用。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;中后台的「势」&lt;/h2&gt;

&lt;p&gt;中后台类应用有两个重要特点——&lt;/p&gt;

&lt;p&gt;第一，业务流程和数据安全远远优先于产品体验，与所谓的「产品力」、花里胡哨的视觉设计等相比，让业务流程顺利地走下去，使数据保持完整要重要得多，其他的只是锦上添花。&lt;/p&gt;

&lt;p&gt;尤其是在面向制造业等实体行业时，就算没有数字产品，业务也照样跑，只不过是效率低了些；数字产品只为提效而存在，无权改变既有业务规则，不能本末倒置。&lt;/p&gt;

&lt;p&gt;所以说，做中后台类应用的公司或部门不需要 to C 的那种「产品经理」，需要的是能够梳理明白业务方（主要是行业或领域专家）需求且准确传达的「需求经理」。&lt;/p&gt;

&lt;p&gt;第二，中后台类应用前端部分高度模式化，又由于是业务与数据优先，在整个系统层面可以更好地建模，并抽象出以模型为源头向应用成品自动推导的构建管线。&lt;/p&gt;

&lt;p&gt;也就是说，只要从业务中提取出了模型，基于某种机制在描述出各种关系后，就能够直接看到应用可操作的最终效果。&lt;/p&gt;

&lt;p&gt;描述关系的方式可以是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;XML、JSON、JS 纯对象等类编程体验的 DSL；&lt;/li&gt;
  &lt;li&gt;在页面中拖拉拽的可视化操作；&lt;/li&gt;
  &lt;li&gt;让 AI 理解需求文档后转译。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，最后一种便是我所提倡并追求的「&lt;a href=&quot;/posts/the-effect-of-knowledge-on-efficiency-part-3/&quot;&gt;知识驱动的、智能的产研一体化平台&lt;/a&gt;」所具备的能力。&lt;/p&gt;

&lt;p&gt;至于那个「机制」是什么，目前我看好的有两个：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;由 &lt;a href=&quot;/people/canonical/&quot;&gt;Canonical&lt;/a&gt; 基于自创的可逆计算理论所实现的 &lt;a href=&quot;https://nop-platform.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;Nop 平台&lt;/a&gt;；&lt;/li&gt;
  &lt;li&gt;师兄正在研发中的 BFF 框架。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但他们都缺少纯前端部分的支持，我的「&lt;a href=&quot;https://ntks.ourai.ws/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;反混沌前端工程&lt;/a&gt;」会把这个空位补上。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工程师的「命」&lt;/h2&gt;

&lt;p&gt;在 ChatGPT 出现在大众视野之前，我们就认为在中后台类应用研发流程中设计师与前端工程师会被干掉，由「需求经理」与后端工程师协作就能胜任。&lt;/p&gt;

&lt;p&gt;而 ChatGPT 及类似产品的出现，让大部分后端 CRUD 工程师被干掉也成为了可能，「需求经理」仅需编写详实的需求文档即可。&lt;/p&gt;

&lt;p&gt;既然业务研发工程师会被知识驱动的、智能的产研一体化平台所替代是「势」，那我们何不去加快这个进程？！&lt;/p&gt;

&lt;p&gt;在我们看来从事此类研发的岗位是没有未来的，但有些人并不如此觉得——或以现状的眼光去思考，或认为人类比 AI 强。&lt;/p&gt;

&lt;p&gt;然而事实是——科技的迭代与增长速度从来不是线性的，其发展所带来的影响之一就是要求人们革新自己的知识与技能；人类最愚蠢的地方就是自以为是。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;虽然本文中主要聊的是中后台类应用的业务研发工程师会「死伤惨重」，不代表 to C 的就「毫发无损」，只不过比例不会那么大。&lt;/p&gt;

&lt;p&gt;与我所秉持的设想相比，师兄的一个说法更夸张了点——没准儿哪天 AI 大力出奇迹，直接生出由源码构成的应用，而不是那种经过层层抽象的。&lt;/p&gt;

&lt;p&gt;这种应用是个黑盒，从软件工程角度来看是不可维护的，任何最佳实践、优化手段都将失效——既没意义，又没必要——就像有了车之后，关于骑马的知识与技能都没用了。&lt;/p&gt;

&lt;p&gt;很多时候我觉得自己像是那种人——告诉别人几天后大家会迎来灾难，要赶紧逃亡，然而一个个却觉得我是在胡说八道，看我笑话。&lt;/p&gt;

&lt;p&gt;所以，这是我最后一次的劝诫，希望看到且看懂的人能有所行动，别再往火坑里跳。&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Apr 2024 13:00:52 +0800</pubDate>
        <link>https://ourai.ws/posts/the-last-advice-to-frontend-engineers/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/the-last-advice-to-frontend-engineers/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
      </item>
    
      <item>
        <title>我在开发本地版「语雀」（下）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;在上篇文章《&lt;a href=&quot;/posts/i-am-developing-the-knosys-web-app/&quot;&gt;我在开发本地版「语雀」（上）&lt;/a&gt;》中挑重点介绍了我开发 KnoSys GUI 应用的缘由及其核心功能；即便如此，有的人看过之后仍是不解我为啥要造这个轮子。&lt;/p&gt;

&lt;p&gt;简单来说，KnoSys 是我宏大愿景的一块拼图，得至少大致了解全貌才有可能真的理解我为何要非造这个轮子不可。&lt;/p&gt;

&lt;p&gt;希望通过本文对 KnoSys GUI 应用背后思想及意义的「揭秘」，令大家能够稍微了解我的宏大愿景。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;设计与构成&lt;/h2&gt;

&lt;p&gt;作为一个追求自由，不想被平台、工具等所挟持的人，我不会自己再创造一个去挟持其他人的工具——己所不欲，勿施于人。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;基础理念&lt;/h3&gt;

&lt;p&gt;在核心部分的设计上尽可能地遵循「开放、标准、可迁移」的原则，尤其是至关重要的数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;采用无需额外下载安装应用而使用操作系统内置应用就能查看的文件格式存储数据；&lt;/li&gt;
  &lt;li&gt;文本类数据优先选择 Markdown、YAML 等对人类读写友好且成为（事实）标准的格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，就算不用 KnoSys GUI 应用而改用 Obsidian、思源笔记、IDE 等也能够无障碍打开并编辑相关文件——甚至可以只用操作系统内置的应用！&lt;/p&gt;

&lt;p&gt;使用 KnoSys GUI 应用的唯一限制，就是为了方便程序处理的目录结构规范——&lt;a href=&quot;https://qiidb.github.io/meta/zh/guides/spec/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;QiiDB 数据规范&lt;/a&gt;——同样是符合（事实）标准或人们惯常用法的。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;用户自主&lt;/h3&gt;

&lt;p&gt;在使用其他云服务或应用时，它们总会「自以为是」地内置一些根本用不到的功能模块，还无法删除或禁用，挤占着有限的各种意义上的「空间」。&lt;/p&gt;

&lt;p&gt;作为知识管理工具，KnoSys GUI 应用最不可或缺的功能特性是「知识库」和「扩展市场」，其他的基本都算是增强功能，理论上皆可通过「扩展市场」按需获取。&lt;/p&gt;

&lt;p&gt;我不打算剥夺用户的选择权，因而不会内置任何非必需的功能模块，尽最大程度让用户自主选择与组合。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;技术架构&lt;/h3&gt;

&lt;p&gt;从技术层面讲，说白了 KnoSys GUI 应用就是 &lt;a href=&quot;https://qiidb.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;QiiDB&lt;/a&gt; 的操作客户端，因其本身并不带任何操作能力——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;QiiDB 是数据规范及以此为标准的开放数据集合，KnoSys 是以这个数据规范为基础去进行数据处理的工具。&lt;/p&gt;
  &lt;footer&gt;欧雷的&lt;cite&gt;&lt;a href=&quot;/murmurs/1grmuqis8/&quot;&gt;想法&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;目前为止，KnoSys 体系由三大部分构成：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SDK——通过函数形式提供能力去操作符合 QiiDB 数据规范的文件夹与文件；&lt;/li&gt;
  &lt;li&gt;网站——结合 &lt;a href=&quot;https://jamstack.org/generators/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;SSG&lt;/a&gt; 将符合 QiiDB 数据规范的数据源进行转换并生成静态网站；&lt;/li&gt;
  &lt;li&gt;应用——可视化操作符合 QiiDB 数据规范的数据源，即 KnoSys GUI 应用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，应用部分强依赖于 SDK，而网站部分会作为应用的扩展功能为其提供「知识库」的共享发布能力。&lt;/p&gt;

&lt;p&gt;「知识库」根据「元数据」进行数据校验及界面相关展示形态的动态渲染等能力，则基于我自己的用于低代码开发的 &lt;a href=&quot;/posts/fxxk-design-from-anti-chaos/&quot;&gt;Fxxk Design&lt;/a&gt; 与 &lt;a href=&quot;/posts/futurejs-from-anti-chaos/&quot;&gt;Future.js&lt;/a&gt; 体系构建。&lt;/p&gt;

&lt;p&gt;另外，以「人」的维度订阅信息的能力会依赖 &lt;a href=&quot;/projects/linxoid/&quot;&gt;LinXoid&lt;/a&gt; 这个有志于帮助人们建立连接的项目。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;遐想与意义&lt;/h2&gt;

&lt;p&gt;既然 KnoSys 是我宏大愿景的一块拼图，那么其他的拼图大概长啥样呢？接下来在务实与务虚两个层面为大家揭晓。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;数字生活&lt;/h3&gt;

&lt;p&gt;就像依赖电器一样，二十一世纪的绝大部分人在生活中已经离不开数字产品了，零零后们更是数字世界的「原住民」。&lt;/p&gt;

&lt;p&gt;然而，迄今为止的数字产品主要是面向商家、企业、政府等，面向个人的以消费娱乐为主；为了让个人与家庭生活得更好的产品不是完全没有，但我觉得很少且不够好。&lt;/p&gt;

&lt;p&gt;作为热爱生活且掌握软件开发技术的人，我有志于填补并完善这块空白！&lt;/p&gt;

&lt;p&gt;结合我个人情况来看，为支撑我想过的可持续数字游牧生活，需要一个家庭数字工作台：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在物理家庭中搭建可外网访问的服务器，最好能多地多中心数据互备；&lt;/li&gt;
  &lt;li&gt;AI 辅助的知识管理，会用到 KnoSys 和本地大语言模型；&lt;/li&gt;
  &lt;li&gt;知识驱动的个人与家庭生活管理，包括家庭协同、财务、健康、智能设备等方面；&lt;/li&gt;
  &lt;li&gt;用于资源共享与沟通交流等的个人或家庭间通信，会用到 LinXoid 和对等网络（P2P）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;届时，物理家庭中的服务器就是 SSOT 的数据中心，电脑、手机等设备则是基本不存储持久数据而连接并访问数据中心的客户端操作界面而已。&lt;/p&gt;

&lt;p&gt;可见文章《&lt;a href=&quot;/posts/if-i-become-a-digital-nomad/&quot;&gt;假设我是数字游民&lt;/a&gt;》与「&lt;a href=&quot;/projects/digital-life/&quot;&gt;数字生活&lt;/a&gt;」计划了解更多。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;赛博空间&lt;/h3&gt;

&lt;p&gt;随着科技的发展，数字世界对现实世界的「侵蚀」会逐渐加深，直至两者深度融合，人们不再「刻意」地去区分孰虚孰实为止——皆为虚幻，亦皆为真实。&lt;/p&gt;

&lt;p&gt;在现实世界中，最重要的是对真理探索后形成的「知识」，以及围绕着「人」展开的一切事情——在作为现实世界映射的数字世界中同等重要，是其根基。&lt;/p&gt;

&lt;p&gt;要成为赛博空间的住民，对「知识」与「人」有清晰的认知，清醒地认识到它们的重要性并争取到相关权力是极为重要的！&lt;/p&gt;

&lt;p&gt;现实世界中，过去「知识」掌握在巫、祭司、教皇等极少数特定人群手中，而平民大众是无知的，可任其摆布；数字世界中，「知识」大多掌握在平台手中，用户受其摆布。&lt;/p&gt;

&lt;p&gt;现实世界中，过去大多数人普遍没啥人权，作为事实上的奴隶被极少数特定人群所压榨剥削；数字世界中，人们也只是某平台里的资源、被压榨剥削的低价/免费劳动力。&lt;/p&gt;

&lt;p&gt;数字世界的文明程度远低于现实世界——绝大部分人还没意识到自己在赛博空间中「知识」与「人」相关的权力，更别谈去争取了！&lt;/p&gt;

&lt;p&gt;我期望自己的行动能够唤醒其他人，哪怕是只有几个。&lt;/p&gt;

&lt;p&gt;扩展阅读可看我写的「&lt;a href=&quot;/series/talking-about-individual-centered-services/&quot;&gt;闲聊个人服务&lt;/a&gt;」系列文章。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;说回到 KnoSys GUI 应用，因秉持开放、标准与用户自主的原则，在没有所依赖技术限制的前提下，我选择具有同样理念的 Web 技术去实现。&lt;/p&gt;

&lt;p&gt;初步考虑支持以下两种使用方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过浏览器扩展程序在新标签页中自动打开；&lt;/li&gt;
  &lt;li&gt;电脑开机时自动启动应用服务，手动在浏览器中输入地址。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;单纯的知识管理部分只提供桌面端，若想要在移动设备上操作，请期待我日后开发的「数字生活」相关的移动端应用吧！&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Feb 2024 11:51:29 +0800</pubDate>
        <link>https://ourai.ws/posts/things-behind-the-knosys-web-app/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/things-behind-the-knosys-web-app/</guid>
        
        <category>web-development</category>
        
        
        <category>personal-knowledge-base</category>
        
        <category>knosys</category>
        
      </item>
    
      <item>
        <title>我在开发本地版「语雀」（上）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;元旦过后，我再次开启时隔差不多 9 个月的对 KnoSys 体系的建设——去年 Q1 做的是生成静态网站相关的，这次则是搞基于 Web 的 all-in-one 知识管理 GUI 应用。&lt;/p&gt;

&lt;p&gt;在这不到一个月的时间里，我断断续续地抽空写代码，该应用目前虽未达到可用状态，但我已经迫不及待地想专门介绍下它！&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;问题与需求&lt;/h2&gt;

&lt;p&gt;做事的动机很重要，明确且清晰的动机会令人拥有强韧的意志力与将想法实施落地的执行力。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;公有云不可信&lt;/h3&gt;

&lt;p&gt;我一直认为，如果有人乐观地前赴后继去使用各种云服务，是因为他们不把由自己产生的数据视为重要资产，或被平台方伤得还不够深。&lt;/p&gt;

&lt;p&gt;作为拥有接近 20 年网龄的老网民，可以说我已经被那些提供云服务的平台给伤得够儿够儿的了——&lt;/p&gt;

&lt;p&gt;云服务上线的初期，为迅速积累用户数，拿到用户信息及其产生的数据，平台方会在一段时间内完全免费提供服务，还可能有各种优惠活动。&lt;/p&gt;

&lt;p&gt;当大多用户已经产生大量数据并对平台有所依赖时，就是平台方开始收割的好时机——对原本免费使用的功能收费，或限制/降低原本免费可使用的资源数量。&lt;/p&gt;

&lt;p&gt;有些平台在对用户产生的数据进行封禁或删除处理之前不会通知，完全没有备份的时间；更有甚者，就连服务要下线了也不会提前通知用户，直接跑路！&lt;/p&gt;

&lt;p&gt;云服务关停或其背后的公司倒闭是迟早的事，当有要深度使用某个云服务的倾向时，就存在被挟持的风险。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;被割裂的「人」&lt;/h3&gt;

&lt;p&gt;当前的内容平台、社交媒体都有自己的账号体系，皆有打造成封闭的信息孤岛的倾向——既不与其他平台和服务进行打通，也不提供（相对）开放的数据获取 API。&lt;/p&gt;

&lt;p&gt;它们的这种行径是只考虑自己的商业利益所驱使的，而无视用户的需求与体验，逼迫用户只能通过应用内的「关注」去获取感兴趣的人的信息更新&lt;/p&gt;

&lt;p&gt;我就特别不喜欢只是因想看内容而去「关注」谁！&lt;/p&gt;

&lt;p&gt;它们中也有做得稍微好点的，如 Twitter 的「&lt;a href=&quot;https://help.twitter.com/en/using-twitter/twitter-lists&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;列表&lt;/a&gt;」功能就解决了我不想「关注」某人但依然可以接收信息更新的需求。&lt;/p&gt;

&lt;p&gt;不过，即便如此，依然是无法自己以「人」为维度进行跨应用跨平台订阅的。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;蹩脚文件管理&lt;/h3&gt;

&lt;p&gt;博客、API 文档等的最终产物都是静态页面，它们的数据源就是符合一定标准、格式的本地文件——可将这些文件视为「常规数据」与「元数据」的混合体。&lt;/p&gt;

&lt;p&gt;当文件多了、站点复杂了之后，单纯的本地文件形式存在几个重要痛点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无法方便地知道自己有哪些文档；&lt;/li&gt;
  &lt;li&gt;查找与编辑不方便；&lt;/li&gt;
  &lt;li&gt;文档间的关系不明了也无法管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要一种方式，能够像中后台业务系统一样管理本地文件，并能通过某种方式将本地文件的数据进行转换。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;我的奇葩需求&lt;/h3&gt;

&lt;p&gt;我最大的癖好是「收集」并「整理」感兴趣的东西，这会使我有很强的充实感、掌控感和安全感。&lt;/p&gt;

&lt;p&gt;从小到大，我收集了多个方面的很多实物，如磁带、光盘、漫画、游戏、邮票、货币等；除此之外，方便无限扩张的虚拟的数据、信息等的收集更是令我痴迷！&lt;/p&gt;

&lt;p&gt;在我浅薄的认知中，自宇宙诞生以来，没什么东西是孤立存在的，事物间或多或少存在着关系——找到并加以利用是超有价值的事情！&lt;/p&gt;

&lt;p&gt;对收集到的数据、信息等建模，相互之间进行有效关联并形成网络，从而做到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将机械化的事务流程标准化并自动化；&lt;/li&gt;
  &lt;li&gt;根据需要快速找到现状与目标间的最优路径；&lt;/li&gt;
  &lt;li&gt;基于当前的生命、生活、工作等状态智能地给出适合且恰当的建议。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的这些需求是在使用云服务或其他应用时很难达到的。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;功能与特性&lt;/h2&gt;

&lt;p&gt;为方便理解，我把自己开发的这个 GUI 应用比作本地版的「语雀」，但不像语雀那样能与他人协作，仅支持个人本地操作。&lt;/p&gt;

&lt;p&gt;下面简单介绍下核心的功能特性。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;知识库&lt;/h3&gt;

&lt;p&gt;在 KnoSys 体系中，「知识库」这个词有广义与狭义之分——广义上，遵循 QiiDB 数据规范的都是；而狭义上，则与数据集基本等同，该 GUI 应用中的即是如此。&lt;/p&gt;

&lt;p&gt;以用户设置的本地文件夹作为数据源，按 QiiDB 数据规范遍历子文件夹并读取文件内容，从而在界面中通过列表页的形式呈现。&lt;/p&gt;

&lt;p&gt;列表中的每条记录都对应着像 YAML、Markdown、图片等的真实文件，也就是说，界面中的 CRUD 实际上就是在对文件进行读写操作。&lt;/p&gt;

&lt;div class=&quot;Video Video--bilibili&quot;&gt;
  &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=1200241590&amp;amp;high_quality=1&amp;amp;autoplay=0&amp;amp;bvid=BV1kF4m1u7fW&amp;amp;cid=1427844899&amp;amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;除了上述对「常规数据」的操作外，还能够可视化地修改「元数据」：定义字段的名称、数据类型、校验规则等；配置列表页、表单页、详情页等界面相关展示形态。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;多应用&lt;/h3&gt;

&lt;p&gt;本 GUI 应用中的「应用」类似于语雀的「空间」，是上文中提到的广义的「知识库」；理论上每个「应用」有相应的本地 Git 仓库，在一定程度上起到数据隔离的作用。&lt;/p&gt;

&lt;p&gt;一个「应用」所对应的文件夹下可以是一个或多个数据集，也可以包含一些除数据集之外的不符合 QiiDB 数据规范的文件——这些文件会被忽略而不做任何处理。&lt;/p&gt;

&lt;p&gt;界面中对数据的修改和删除等可变操作限制在某个「应用」内，不能对其他「应用」内的数据进行变更；但某个「应用」的数据可作为其他「应用」的外部数据源读取。&lt;/p&gt;

&lt;p&gt;举个例子——&lt;/p&gt;

&lt;p&gt;我有两个「应用」，一个是像豆瓣那样包含书影音基本信息的，另一个是我的创作和一些个人记录——就叫它「外脑」吧。&lt;/p&gt;

&lt;p&gt;假如我正在看《绝命毒师》并想记录观看进度，那就得：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在「外脑」中添加书影音那个「应用」为外部数据源，并与「外脑」的某个/些「知识库」相关联；&lt;/li&gt;
  &lt;li&gt;在书影音那个「应用」中新增一条包含《绝命毒师》相关信息的数据；&lt;/li&gt;
  &lt;li&gt;到「外脑」中读取书影音数据，找到《绝命毒师》后将其标记为「在看」，会在关联的「知识库」中生成相应数据；&lt;/li&gt;
  &lt;li&gt;后续在关联的「知识库」中找到《绝命毒师》标记看到哪集。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以说，「应用」就相当于数据库。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;信息订阅&lt;/h3&gt;

&lt;p&gt;在语雀等平台中，关注了某个账号就会收到相应的信息推送，这是一种信息的订阅方式；该 GUI 应用中的信息订阅将打破「常规」，以「人」的维度接收信息。&lt;/p&gt;

&lt;p&gt;这里的「人」是指在虚拟身份背后可被识别的具有同一性的存在——&lt;/p&gt;

&lt;p&gt;我在语雀、知乎等的账号叫「欧雷」，而在掘金、微博等的账号叫「欧雷殿」，但它们都共同指向「欧雷」这个虚拟人格——「欧雷」和我本身都算是那个「人」。&lt;/p&gt;

&lt;p&gt;「人」既可以是个人也可以是组织，在该 GUI 应用中的主要体现形式为聚合了多个平台账号或网站 feed 等的统一信息源。&lt;/p&gt;

&lt;p&gt;也就是说，在该 GUI 应用中订阅了「欧雷」这个「人」的信息，就能收到「欧雷流」网站和在其他平台的内容更新推送。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;扩展市场&lt;/h3&gt;

&lt;p&gt;衡量应用软件是否好用的一个方面就是其可扩展性，作为开源且免费的基于 Web 的 all-in-one 知识管理 GUI 应用，必须得具备（较为）强大的可扩展性！&lt;/p&gt;

&lt;p&gt;该 GUI 应用的主要可定制点有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;囊括字体、颜色、间距、整体布局等的界面风格主题；&lt;/li&gt;
  &lt;li&gt;「知识库」的列表页、表单页、详情页等界面相关展示形态；&lt;/li&gt;
  &lt;li&gt;「知识库」数据的 CRUD 钩子与界面操作自定义；&lt;/li&gt;
  &lt;li&gt;在「首页」展示的「小部件」（参考 iOS、macOS 等操作系统）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中，「知识库」相关的扩展可打包成「模板」一同安装。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;每当我跟别人说自己在开发一个知识管理工具时，就会被问到：「不是已经有 Obsidian、思源笔记、吧啦吧啦吧啦了吗？你这个跟它们有啥区别？」&lt;/p&gt;

&lt;p&gt;如此迫切地想写文章介绍，解答此类问题也是重要的原因。&lt;/p&gt;

&lt;p&gt;本文就是挑重点说下我开发这个 GUI 应用的缘由，以及它的核心功能有哪些——有的已经实现了，有的在实现的路上或规划中。&lt;/p&gt;

&lt;p&gt;下篇将进一步阐述背后的思想理念和更高远的遐想与意义。&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Feb 2024 18:44:34 +0800</pubDate>
        <link>https://ourai.ws/posts/i-am-developing-the-knosys-web-app/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/i-am-developing-the-knosys-web-app/</guid>
        
        <category>web-development</category>
        
        
        <category>personal-knowledge-base</category>
        
        <category>knosys</category>
        
      </item>
    
      <item>
        <title>是时候反思下 Web 前端了</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;我以往写的技术类文章，绝大部分是问题反思、方法论之类的，极少有某个具体技术或工具的介绍与使用教程——除非是我创造的。&lt;/p&gt;

&lt;p&gt;眼看着曾经经常针对前端领域问题进行有价值思考与讨论的前辈、大佬、同行们接连退隐或沉默，这块儿的高价值新产出内容越来越少。&lt;/p&gt;

&lt;p&gt;因此，我打算自告奋勇地正式接下「对前端领域问题进行思考并尽量产出高价值内容」这个生态位的接力棒。&lt;/p&gt;

&lt;p&gt;需要特别说明的是，「前端领域」不局限于以 HTML、CSS、JavaScript 等技术为核心的「Web 前端」。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;为何要反思？&lt;/h2&gt;

&lt;p&gt;在这里，我想要反思的是「Web 前端」，原因如下——&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;补充知识&lt;/h3&gt;

&lt;p&gt;我是在高中时一个网友的引导下开始接触 HTML，到 2009 年实习时&lt;a href=&quot;/posts/brief-history-of-my-blog/&quot;&gt;搞博客&lt;/a&gt;才真正开发网页——&lt;a href=&quot;/posts/career-path-of-a-frontend-engineer/&quot;&gt;我是因为兴趣才入的「前端开发」这行。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如同生活中的很多事物一样，喜欢并不等同于对它很了解——那些说自己爱家乡爱祖国的人，真的敢拍胸脯说自己了解家乡和祖国吗？&lt;/p&gt;

&lt;p&gt;同理，我虽对「Web 前端」有一定的了解，但还很不够！&lt;/p&gt;

&lt;p&gt;若是哪天有个对「Web 前端」感兴趣且好奇心很重的家伙，像小孩子一样追问我相关技术的概念模型、起源、理念什么的，要是答不上来该多「丢脸」……😅😅😅&lt;/p&gt;

&lt;p&gt;更重要的是，我得先&lt;a href=&quot;/posts/ready-for-phase-one/&quot;&gt;混过面试而找到工作&lt;/a&gt;……😂😂😂&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;前端已死？&lt;/h3&gt;

&lt;p&gt;「前端」死不死，或者说「前端」有没有未来，这个话题我 2020 年就在文章《&lt;a href=&quot;/posts/the-future-of-frontend-web-development/&quot;&gt;前端有未来吗？&lt;/a&gt;》和知乎问题《&lt;a href=&quot;https://www.zhihu.com/question/392501126/answer/1208792987&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;前端会有未来吗？&lt;/a&gt;》里聊过，&lt;a href=&quot;/people/zenany/&quot;&gt;平侠&lt;/a&gt;也于 2019 年写过《&lt;a href=&quot;https://www.yuque.com/zenany/up/the_future_frontend&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;前端之未来&lt;/a&gt;》。&lt;/p&gt;

&lt;p&gt;结论就是，「前端」不会死，但「Web 前端」会死——「死」不代表完全消失，而是直接相关的需求和岗位会减少相当多，受关注程度也大幅降低。&lt;/p&gt;

&lt;p&gt;之所以这样，是技术与业务领域的周期性导致的——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;未来的人机交互不再是 HTML、CSS、JS，即使仍然是它们，但已不重要或与现在相比变得面目全非，相当于学习新技术，并且要掌握图形学等略硬核的基础知识。&lt;/p&gt;
  &lt;footer&gt;欧雷《&lt;cite&gt;&lt;a href=&quot;/posts/what-kind-of-job-should-i-look-for/&quot;&gt;看工作看得我「蕉绿」了&lt;/a&gt;&lt;/cite&gt;》&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;我要反思「Web 前端」是想让它「死」得更快一些，加速周期的迭代进程——促进「&lt;a href=&quot;https://ntks.ourai.ws/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;反混沌前端工程&lt;/a&gt;」的发展，迎接&lt;a href=&quot;/posts/the-effect-of-knowledge-on-efficiency-part-3/&quot;&gt;知识驱动的、智能的产研一体化平台&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;产出什么&lt;/h2&gt;

&lt;p&gt;主要产出以模块化、组件化等为轴的 Web 前端工程初级阶段「前端工程化」相关内容，也就是绝大多数前端团队在做的那些。&lt;/p&gt;

&lt;p&gt;你没看错，「前端工程化」就是 Web 前端工程的「初级阶段」；还有作为中级阶段的「前端工业化」与高级阶段的「前端智能化」。&lt;/p&gt;

&lt;p&gt;正如文章开头所说，我所处的生态位决定了在写文时不太会深入具体技术细节，而倾向于在概念、逻辑等思维层面进行梳理，帮助读者理解来龙去脉。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;本文算是日后一些技术类文章的「前言」——&lt;/p&gt;

&lt;p&gt;又给自己挖了个难填的大坑，一些文章和文章系列的系列；由于该主题会比较宽泛，因而在后续的文章命名上不会一致且具有辨识度。&lt;/p&gt;

&lt;p&gt;与该主题相关的文章绝大部分是免费查阅，但不排除会有个别文章收费阅读的可能。&lt;/p&gt;

&lt;p&gt;仅以这些文章致敬那些有点理想主义、愿为理想付出并坚持初心、善意分享交流并答疑解惑的如灯塔般的各位国人软件工程师们！&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Oct 2023 14:08:34 +0800</pubDate>
        <link>https://ourai.ws/posts/time-to-rethink-frontend-web-development/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/time-to-rethink-frontend-web-development/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
      </item>
    
      <item>
        <title>反思软件开发：知识流动（下）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;本文来说说在企业中让知识流动起来的大体思路。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;数字员工&lt;/h2&gt;

&lt;p&gt;在以互联网或软件及服务为营生的企业中，各个层级、分工的人和处理各类事务的应用软件是办公与业务运作的两大要素；企业中的绝大部分人是员工这很理所当然，但为何不能把工作中所用到的各种应用软件看成整体，也当作一名员工来看待呢？&lt;/p&gt;

&lt;p&gt;将这名特殊的「员工」称为「数字员工」，与其他员工不同的是，它是纯虚拟的、数字的，没有物理层面的形态，但与其他员工一样可以处理工作上的事务。&lt;/p&gt;

&lt;p&gt;也许一开始啥也不会，但在像训练动物或教导小孩般对其加以训练，某些方面可以做得比人更出色，尤其是机械重复性工作！再加上该「员工」没有七情六欲，不知疲倦，比人更加稳定可靠且经济实惠。&lt;/p&gt;

&lt;p&gt;如同人类员工会被按照能力和职责等进行职级划分，数字员工同样也存在等级——&lt;/p&gt;

&lt;p&gt;处理各类事务的能力七零八落，像精神分裂般没有整体感，像智障一样没有一点智能；不具备任何知识，即便有，相互间也是割裂的——几乎就是像锤子那样的工具。&lt;/p&gt;

&lt;p&gt;部分能力之间相互打通，一些知识可以小范围内流动起来，形成更为有效的系统；减少人类员工间的沟通，提高机械重复性工作的效率——算是简易流水线了。&lt;/p&gt;

&lt;p&gt;绝大部分企业中的数字员工都是这两个级别的，相对（十分）低能，需要人类员工手把手操控；人类员工与数字员工之间是从属关系，或者说是主奴关系。若以「人」的标准要求，这两类数字员工就是残疾。&lt;/p&gt;

&lt;p&gt;而更高级些的数字员工，与人类员工之间应当是伙伴关系，是强有力的助手，让人类员工可以基本摆脱机械重复性工作，转而将工作重心从事创意性内容——从体力密集型转向脑力密集型。&lt;/p&gt;

&lt;h2 id=&quot;smartAssistant&quot;&gt;智能助手&lt;/h2&gt;

&lt;p&gt;可以说，智能助手是最高级别的数字员工了，是企业内部的「万金油」，承担这一角色的非智能工作台莫属，其核心为——&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;知识管理&lt;/h3&gt;

&lt;p&gt;在当下这个时代，无论是个人还是企业，知识都是最为重要的资产；但如何有效地沉淀知识，并让它们像活水一样流动起来，这是很多个人与企业都面临的一个难题。&lt;/p&gt;

&lt;p&gt;对于企业而言，知识更是推动创新所需要的原料，无法创新的企业只能坐吃山空，进而被时代所淘汰；企业常会以人员的频繁换血来谋生机，但这基本是无效的，自上而下地推行知识管理才是正道。&lt;/p&gt;

&lt;p&gt;有效的知识管理必须先以《&lt;a href=&quot;/posts/the-effect-of-knowledge-on-efficiency-part-2/&quot;&gt;反思软件开发：知识流动（中）&lt;/a&gt;》中阐述的那几个基本原理为基础，打造出企业内专有的、集中式地中心化管理各类知识的庞大知识库。&lt;/p&gt;

&lt;p&gt;企业员工脑中与企业有关的知识，不仅是员工个人的，也可以转化为企业的，因而企业知识来源于一个个员工的个人知识；所以，如何让员工心甘情愿并舒服地将他们脑中的隐性知识显性化为企业知识，是每个企业高管该用心考虑的。&lt;/p&gt;

&lt;p&gt;企业知识虽来源于个人知识，但并非个人知识直接就成为了企业知识，而是经过一定范围内多人讨论后变换得来，这也算是「共识」；是共识就应当尽可能地固化进工具或流程中，减轻并脱离对人的意志等的依赖。&lt;/p&gt;

&lt;p&gt;没做好知识管理的话，企业的成果会高度依赖于员工个人，存在于员工脑中与企业相关的隐性知识将随着员工的离职而丢失；若这部分知识数量较多或（潜在）重要性较高，那企业将会遭受较大损失。&lt;/p&gt;

&lt;p&gt;大多企业都有知识管理，但很多是将知识散落在多个应用上，如 Confluence、禅道等；这些应用间本身就是较为割裂的，知识间的关联性弱到几乎没有。&lt;/p&gt;

&lt;p&gt;如果知识管理不是基于「唯一可信来源」（下文称「SSOT」）的中心化方式，如同一盘散沙，跟没有也没啥区别；遵从「SSOT」进行中心化管理的知识库就是智能助手的「大脑」，使其具备「记忆」能力，可将知识作为后续行为的原料。&lt;/p&gt;

&lt;p&gt;智能助手的其他能力实际是输送知识的管道或变换其形态的转换器，人类员工的最终产物（工作成果）皆由数字化的知识经过各部分能力所连成的管线推导而来。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;产研一体化&lt;/h3&gt;

&lt;p&gt;这里说的「产研一体化」就是将企业的数字产品相关的知识自动推导生成为应用成品的管线，其核心理念依然如《&lt;a href=&quot;/posts/integration-of-requirement-and-development-in-my-mind/&quot;&gt;聊聊中后台产研一体化：引子&lt;/a&gt;》中所说。&lt;/p&gt;

&lt;p&gt;在我所设想的「产研一体化」中，「（业务）应用」是「需求 + UI &amp;amp; UX + 低代码框架」，忽略一些细节后可以形式化表达为 &lt;code&gt;App = Render(Extract(需求, UI &amp;amp; UX))&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其中，「需求」是「某一版本的知识集」，&lt;code&gt;Render&lt;/code&gt; 是低代码框架的一部分，而 &lt;code&gt;Extract&lt;/code&gt; 则是知识库与在线设计器。&lt;/p&gt;

&lt;p&gt;在传统的产研协作模式中，需求管理，或者说业务知识管理很容易混乱——知识以不同的形式散布在不同平台、IM 中，并且知识之间没有关联；经常口头产生或更改需求，没有落实为数据存留下来，导致知识丢失。&lt;/p&gt;

&lt;p&gt;在产品经理出了 PRD、原型之后，UI &amp;amp; UX 设计师出设计图，后端建表、写业务代码，前端再根据产品经理、UI &amp;amp; UX 设计师及后端的产物去编写页面代码——他们的工作是相对割裂的，各环节产物之间没有实际的关联关系，改个需求要分别更改。&lt;/p&gt;

&lt;p&gt;但在我所设想的产研协作模式中，将「需求」抽象为「知识」，一切需求变动都要先更新知识数据，然后自动将变更反应到「应用」这个最终产物上——这便是以「知识」作为「SSOT」的「产研一体化」。&lt;/p&gt;

&lt;p&gt;产品经理整理各类需求，抽象并沉淀/更新与自身业务相关的业务概念，明确它们之间的关系和作用规则，这些会留存在知识库中，能够以文章、流程图、知识图谱等形式查看；挑选几个固定版本的知识创建一个集合，这就是一个「需求」，可以认为是「PRD」。&lt;/p&gt;

&lt;p&gt;产品经理在做这些事情时实际上就是在本体建模或领域建模，其产物可以转化为供低代码框架消费的元数据，用于后端处理业务数据和前端对数据进行校验等处理。&lt;/p&gt;

&lt;p&gt;产品经理再在在线设计器上通过可视化的方式从领域模型中选取字段，从已有的交互模式库中选取合适的 UI 组件，经过一系列拖拉拽操作后就产生了「原型」，与传统模式不同的是，这个「原型」发布后就是页面的最终效果。&lt;/p&gt;

&lt;p&gt;如果 UI &amp;amp; UX 设计师对「原型」的某部分视觉效果不太满意，也可以在在线设计器上进行微调。&lt;/p&gt;

&lt;p&gt;以下为大概的示意图（一年前画的，但整体思想差不多）：&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;{{ &#39;posts/20230310/progress-of-knowledge-driven-lcdp&#39; | asset_path }}&quot; alt=&quot;示意图&quot; /&gt;
  &lt;figcaption&gt;示意图&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;总结下新的模式与传统模式的不同点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;「知识」驱动，以「知识」作为「SSOT」，强制使知识保持最新，不会出现知识分散与丢失的状况；&lt;/li&gt;
  &lt;li&gt;「代码」与「需求」间建立了关联关系，根据由「知识」衍生的元数据自动化生成/更新业务应用（的功能）；&lt;/li&gt;
  &lt;li&gt;「代码」与「设计」间建立了关联关系，UI &amp;amp; UX 设计师在平台上微调产生的配置数据会生成前端页面的样式代码。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「产研一体化」这条自动推导管线的关键点是要抽象出数量最少、可组合性最高、可解释性最强的几个原子化概念，就像物理中的「粒子」、「力」等一样，它们之间的相互组合与作用可演化出万物。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;人工智能&lt;/h3&gt;

&lt;p&gt;作为区别于其他更低级别数字员工的关键，智能助手必须搭载 AI 以让它拥有「智力」，从而具备自主学习的能力，能够了解企业并理解人类员工的需求，进而在被动接受指令执行任务之外还能主动进行提醒与建议等。&lt;/p&gt;

&lt;p&gt;遵从「SSOT」进行中心化管理的知识库为 AI 提供了海量优质的学习材料，可在此基础上训练出最懂企业的专属模型，如此一来——&lt;/p&gt;

&lt;p&gt;人类员工在新增或编辑知识时，会自动拉取关联度很高的其他知识进行提示；人类员工输入的知识及与智能助手之间的交互同时也能使它变得更加「聪明」，更懂那个人类员工的习惯。&lt;/p&gt;

&lt;p&gt;团队中某个人有事要请假，领导在审批时智能助手会根据任务的排期与状态以及备选人员情况等信息进行建议，看是否予以通过或想些替代方案。&lt;/p&gt;

&lt;p&gt;需要接手他人工作的人类员工，智能助手会收集整理好一份较为全面且详细的交接文档供其阅读理解，并根据人类员工的能力等提供能够快速上手的建议。&lt;/p&gt;

&lt;p&gt;当监测到企业业务所关联的政策、行业等的重要动态时，智能助手会通知相关人员，并提醒有哪些知识需要进行更新以紧跟时事，及时应对变化。&lt;/p&gt;

&lt;p&gt;除了以上列举的场景，还能做到很多令人感到「贴心」的事情！&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;一家企业内不仅有人类员工，还有可将工作中各种数字化手段整体看待的数字员工；其中，最高级别的是智能助手，智能工作台承担了这一角色。&lt;/p&gt;

&lt;p&gt;智能助手能够卓有成效地帮助人类员工解决机械重复性工作，使人们可以专注于创意性内容，真正地从体力密集型变为脑力密集型；它就像是个「贴心」的小秘书，因而不能把它看作奴仆，而是伙伴。&lt;/p&gt;

&lt;p&gt;由于智能助手的特性，一个需求的出现，一个想法的诞生，它们是否靠谱在输入进去之后的那一刻就能得到初步验证；经过大家共同讨论与修改，敲定后的结论就作为知识在智能助手中留证，并直接看到数字产品的最终成品。&lt;/p&gt;

&lt;p&gt;ChatGPT 的横空出世，带来了一些影响——&lt;/p&gt;

&lt;p&gt;既标志着 AI 对人类自然语言的理解能力已经达到可落地推广应用的程度，同时表明自然语言用户界面（LUI）在某些场景下可以取代图形用户界面（GUI）——通过输入文字或说话告诉智能助手把页面背景色从白色变成红色。&lt;/p&gt;

&lt;p&gt;倒逼着那些自己逻辑不清晰，表达能力差，不会描述问题的人乖乖承认是自己不行，而无法甩锅给别人；让某些老板意识到智能助手及伴随的组织架构与协作模式的变革是企业在未来得以生存的关键，晚一步就会被时代所淘汰！&lt;/p&gt;

&lt;p&gt;此外，企业知识来源于员工的个人知识，那么员工个人的智能助手与企业的智能助手之间无缝对接的话，会产生什么效应？&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2023 21:16:10 +0800</pubDate>
        <link>https://ourai.ws/posts/the-effect-of-knowledge-on-efficiency-part-3/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/the-effect-of-knowledge-on-efficiency-part-3/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
        <category>efficiency-improvement</category>
        
      </item>
    
      <item>
        <title>反思软件开发：知识流动（中）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;在上篇文章，即《&lt;a href=&quot;/posts/the-effect-of-knowledge-on-efficiency-part-1/&quot;&gt;反思软件开发：知识流动（上）&lt;/a&gt;》中，我激情昂扬地陈述了日常工作中常会遇到的比较恼人的几个问题，并从常规视角简单说明了问题所在，本文将会从知识的角度指出它们产生的原因为何。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本原理&lt;/h2&gt;

&lt;p&gt;在分析并解决问题之前所必须了解的一些事情。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;知识定义&lt;/h3&gt;

&lt;p&gt;在《&lt;a href=&quot;/posts/the-real-world/&quot;&gt;客观的现实世界&lt;/a&gt;》中讲「&lt;a href=&quot;/posts/the-real-world/#section-2&quot;&gt;DIKW&lt;/a&gt;」（即「data」、「information」、「knowledge」和「wisdom」）时，我简单地解释了「知识」是什么——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过「数据」和「信息」只能了解到「实体」的表面呈现，这些是不可靠的，对人的活动基本没有指导意义，人们需要的是能够尽可能正确地反映「实体」的「性质」与「逻辑」的「知识」。&lt;/p&gt;
  &lt;p&gt;「知识」可以通过建模的方式获取，即将「信息」分门别类后抽取相同特征并简化为「模型」。「知识」不一定是真的，人永远也无法确切地知道其到底是不是真的，只能通过不断的验证使其无限接近于真。&lt;/p&gt;
  &lt;footer&gt;欧雷《&lt;cite&gt;&lt;a href=&quot;/posts/the-real-world/&quot;&gt;客观的现实世界&lt;/a&gt;&lt;/cite&gt;》&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了方便阐述和理解，本文将默认不严格区分「数据」、「信息」与「知识」这几个概念，可以临时把它们看作是一回事——都是「知识」。&lt;/p&gt;

&lt;p&gt;这样一来，在本文的语境中，职业、专业、业务等领域知识是「知识」，语言、文字、图形、代码等符号系统也是「知识」。&lt;/p&gt;

&lt;p&gt;将「知识」根据是否被符号系统外化分类的话，已外化显现并记录下来的叫它「显性知识」，未经外化仍存在于某个人的意识中的称为「隐性知识」。&lt;/p&gt;

&lt;p&gt;基于「万物皆可描述」的理念，任何「隐性知识」都可被适当的形式描述出来，即便会有一定程度的失真，这就是「隐性知识显性化」——同时也是让知识流动起来的基本前提。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;知识封装&lt;/h3&gt;

&lt;p&gt;简单来说，「封装」就是用一个符号去压缩或者说包装一些有所关联的知识，就像打包好的快递包裹一样。这样做的目的是为了方便知识的组合与传递，提高其流转效率。&lt;/p&gt;

&lt;p&gt;日常生活和工作中有很多知识封装的例子，如：语言、文字中各种类型的词汇；软件开发时定义的常量、变量、函数、类等。&lt;/p&gt;

&lt;p&gt;既然要封装，就不应该出现一个海纳百川的符号——如果它什么都是，那它就什么都不是，实际不会起到任何真正有价值的正向作用。因此，要控制符号语义的边界，尽量恰到好处。&lt;/p&gt;

&lt;p&gt;控制边界就是限制符号所封装的知识的复杂度以及传播途径——&lt;/p&gt;

&lt;p&gt;遵循关注点分离、单一职责等原则提高符号的内聚性，如：软件的模块拆分、分层架构；工作岗位的横向、纵向职责划分——专人专事，别给某个岗位的人提不相关的要求，且拿那些不合理要求作为考核指标。&lt;/p&gt;

&lt;p&gt;最少化输入/输出（I/O）通道以限制符号间的通信，降低并抑制混沌产生的概率——软件程序单元的 API 和参数要尽可能地少；某个小组或部门只让尽可能少的人（最好是只有一个）成为「必须知道（几乎）全部细节的人」。&lt;/p&gt;

&lt;p&gt;这里有个可能比较容易疑惑的地方——人怎么就是「符号」了？&lt;/p&gt;

&lt;p&gt;这是一个涉及到哲学、社会学、心理学的问题，就不在这里严肃认真地讨论了，简单说明就是——&lt;/p&gt;

&lt;p&gt;一个人在认知他人时，会不可避免地根据对方表现出的特征、状态等进行标签化，进而聚合形成一个自己所认为的那个人的符号化形象。&lt;/p&gt;

&lt;p&gt;并且，在与他人协作时，一个人的身份更大程度上不是他自己，而是他所处的包含且代表他的专业知识与技能、部门职责的工作岗位，这更加是符号了——某个职业、某个专业、某个部门、某个岗位等都是封装了特定知识的符号。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;知识传播&lt;/h3&gt;

&lt;p&gt;假设知识被恰如其分地封装，以此为前提，大胆地掏出奥卡姆的剃刀——&lt;/p&gt;

&lt;p&gt;用尽量精确且简单的符号去表达知识——「精确」是为了避免歧义，「简单」是为了易于理解，从而减少认知偏差，让协作的人之间在脑中所想象出的是同一个事物；在软件开发方面，则会缩减代码量，节省资源开销。&lt;/p&gt;

&lt;p&gt;用尽量短的路径抵达终端——路径越长，到达终端的时间就越长，损耗失真得就越多，对时效性、完整性要求高的话会对终端产生很大影响。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;知识维护&lt;/h3&gt;

&lt;p&gt;基于「唯一可信来源」（英文为「Single Source of Truth」，下文简称「SSOT」）思想对知识进行维护，其核心就是只认可某一个来源的知识，尊其为权威，不接受并无视其他来源，有种一神教的感觉。&lt;/p&gt;

&lt;p&gt;这需要结合一定的强制性措施保障其能够执行到位，以杜绝同一知识出现多个版本；建立某种反馈控制机制，令所有消费了知识的环节都能在源头变了时响应式更新，并反向促进知识源头时刻保持最新。&lt;/p&gt;

&lt;p&gt;若不遵从「SSOT」，定会出现同一知识有多个版本存在的情况——在协作时不仅会增加理解和沟通成本，促成拉锯扯皮甚至是争吵谩骂的状况；还会提高知识同步时的修正成本和维护成本，让人逐渐失去更新知识的动力。&lt;/p&gt;

&lt;p&gt;遵从「SSOT」的知识是群体智慧的结晶，相对来说会提高知识的正确性和有效性。就算错，也是一错到底，要追责的话，不是某（几）个人的责任，而是知识维护的所有参与者的责任。&lt;/p&gt;

&lt;p&gt;除了上述特点，遵从「SSOT」的知识总体上是采用中心化的管理方式，并能减少甚至避免显性知识分散与隐性知识丢失的状况，从而提高知识的完整性、可观测性。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;问题分析&lt;/h2&gt;

&lt;p&gt;下面将用上文阐述的关于知识的基本原理去从知识的角度分析并解释在&lt;a href=&quot;/posts/the-effect-of-knowledge-on-efficiency-part-1/&quot;&gt;上篇文章&lt;/a&gt;中描述的那几个日常工作中的常见问题——&lt;/p&gt;

&lt;p&gt;业务支持、岗位职责和跨部门协作中的问题主要是知识封装得不好，并且未被有效、顺畅地传播；测试左移的问题则在于知识维护上，在跨部门协作中也存在此类问题。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本文总结了关于知识的几个基本原理，并基于它们从知识的角度解释了日常工作常见问题的原因。在下篇文章中，我将在本文所述的基本原理之上畅想解决那些常见问题的方案。&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2022 16:12:27 +0800</pubDate>
        <link>https://ourai.ws/posts/the-effect-of-knowledge-on-efficiency-part-2/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/the-effect-of-knowledge-on-efficiency-part-2/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
        <category>efficiency-improvement</category>
        
      </item>
    
      <item>
        <title>反思软件开发：知识流动（上）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;「提效」这个话题很大，涉及了很多方面，虽然会和技术等工具有关，但它们相对来说不是重要的，由参与活动的人的认知、意识及其所决定的行为更为重要！&lt;/p&gt;

&lt;p&gt;在《&lt;a href=&quot;/posts/human-factors-in-software-production-part-1/&quot;&gt;反思软件开发：人为因素（上）&lt;/a&gt;》与《&lt;a href=&quot;/posts/human-factors-in-software-production-part-2/&quot;&gt;反思软件开发：人为因素（下）&lt;/a&gt;》中尝试阐述了「人」对「效率」的影响，本文和下两篇文章我将试图从「知识」的角度说明「效率」问题。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;常见问题&lt;/h2&gt;

&lt;p&gt;我们在日常工作中遇到的问题很大程度是以分工协作及沟通交流为中心的——不仅是人与人之间，还包括人与机器之间和机器与机器之间。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;业务支撑&lt;/h3&gt;

&lt;p&gt;在支撑业务功能时，前端是如何做的？&lt;/p&gt;

&lt;p&gt;当今前端开发的主流做法就是在基础组件（顶多再加上所谓的「业务组件」）之上新建个相应业务功能的「页面组件」，一顿操作猛如虎之后，至少几百行代码出来了，如果布局和交互稍微复杂点，破千行轻轻松。&lt;/p&gt;

&lt;p&gt;设计师和产品经理验收后很高兴，不仅还原度高，还没什么「八阿哥」。可过了几个月甚至一两年，在需要加点新功能或做些调整时，打开代码文件，傻眼了——&lt;/p&gt;

&lt;p&gt;当时的业务逻辑是啥来着？这个地方当初为啥这么写？怎么一个小调整要改这么多地方？！这地方太复杂了，不敢改啊，改出问题又得背锅……&lt;/p&gt;

&lt;p&gt;有经验的人都能看出问题主要出在哪，以及该如何避免，包括当初写下那些代码的人——&lt;/p&gt;

&lt;p&gt;对代码和逻辑进行适当切割，拆分出文件；语义化命名，以将部分隐性知识显性化，并减少无意义注释；抽象出具备高内聚性和可复用性的模块；遵循各种「原则」，使用高大上的「模式」……&lt;/p&gt;

&lt;p&gt;然而，真正有动力去做这些事情的人并不多，代码写得好又不会升职加薪，并且我们大部分人没有什么「正当理由」要求他人写出好代码——除非这成为带有行政属性的制度。&lt;/p&gt;

&lt;p&gt;前端在业务支撑时的主流模式加上人的惰性，在人与机器的沟通交流中形成很大的障碍。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;岗位职责&lt;/h3&gt;

&lt;p&gt;有些人对前端从业者抱有「不切实际」的期望和要求——前端应该懂业务——我觉得这很荒唐，这是他们的「幻想」。&lt;/p&gt;

&lt;p&gt;当前一般意义上属于「前端」的工作有网站开发、函数库、组件库、CLI 工具、开发框架等专注于「前端」这个领域且与企业「业务」不相关的；与「业务」有所关联的，基本只有应用开发。&lt;/p&gt;

&lt;p&gt;在以软件及服务为营生的企业中，涉及到「前端」的职业、岗位有前端工程师、前端负责人、全栈工程师、（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/426707646&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;Modern.js&lt;/a&gt; 所倡导的）应用开发者/产品开发者、业务架构师以及产品经理。其中，是「纯前端」（专注于「前端」这个领域）的只有前端工程师。&lt;/p&gt;

&lt;p&gt;如果一个人，他的工作内容与职责不局限于「前端」，那他实际上不是一个前端工程师，并很大可能也不会自称为「前端工程师」；那些自称「前端工程师」且说自己「（要/该）懂业务」的人，极有可能是被动的——在应聘或被安排工作时如此要求，或者是为了 KPI 和升职加薪。&lt;/p&gt;

&lt;p&gt;「前端」理应是做「业务无关」工作的「前端工程师」——以此为前提，前端专注于展示与交互，代码中不应有业务语义，与前端沟通时的语言也是业务无关的，转化为与展示、交互强相关的用语——从「前端」的世界中剥离一切「业务」强相关的事物。&lt;/p&gt;

&lt;p&gt;但是，应用开发中一定会有业务相关的事物，该如何处理呢？&lt;/p&gt;

&lt;p&gt;在用合适的架构和框架将业务语义的逻辑、状态等从 UI 组件中剥离出去之后，由非前端人员（通过 &lt;a href=&quot;https://handiejs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;Handie&lt;/a&gt; 类的工具）去完成领域模型定义、业务相关的状态控制等。&lt;/p&gt;

&lt;p&gt;「非前端人员」是指除做「业务无关」工作的「前端工程师」之外的人——前端负责人、全栈工程师、应用开发者/产品开发者、后端工程师、业务架构师、产品经理等。&lt;/p&gt;

&lt;p&gt;那些对前端抱有「不切实际」的「幻想」的人，估计是认为这会提高协作效率或价值产出？他们应该是想多了……&lt;/p&gt;

&lt;p&gt;当一个人对「业务」一知半解且有自己想法时，沟通协作中发生摩擦的概率和次数会更高，不仅不会提高价值产出，还会降低协作效率。这个人，无论是不是「前端」。&lt;/p&gt;

&lt;p&gt;在这方面，「设计」与「前端」实则属于一类人——着眼于展示与交互，不需要去了解和背负「业务」上的事情。要求「前端」和「设计」去懂业务，从「人」的角度看，这也算是一种压迫行为。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;测试左移&lt;/h3&gt;

&lt;p&gt;在软件开发流程中，「测试」是在「开发」之后的，也就是在功能开发完成后才进行功能上的测试。这样一来，只是程序单元上的问题还好说，但若是架构甚至是业务上有问题，返工的成本可就很大了。&lt;/p&gt;

&lt;p&gt;为了尽早发现问题，并在没造成什么实际影响时解决掉，测试人员或行为需要介入到上游环节中，如测试人员参与需求评审、设计稿评审、软件设计评审，开发阶段进行单元测试等——这就是「测试左移」。&lt;/p&gt;

&lt;p&gt;虽说这样在一定程度上能够达到预防的目的，但依然会存在信息同步上的问题——&lt;/p&gt;

&lt;p&gt;在开发过程中发现了评审时没意识到的问题，与产品、设计私下沟通后做了修改，但没同步更新相关文档也没告知测试人员，这时就很容易会在不知情的情况下漏测，进而导致线上故障。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;跨部门协作&lt;/h3&gt;

&lt;p&gt;总的来说，跨部门协作是很烦的事情，比同部门协作烦上几个等级。究其原因，就是人性导致的利益冲突，考虑更多的是自身利益，而非共同利益；并且思想狭隘、目光短浅，做一锤子买卖，而非长期合作。&lt;/p&gt;

&lt;p&gt;一个比较普遍的问题就是——&lt;/p&gt;

&lt;p&gt;业务部门在功能迭代时需要用到中台/平台部门的服务，倘如此时中台/平台部门的基础服务还不完善，无法「开箱即用」，那么就面临「业务方的个性化逻辑代码写到哪和谁维护」的选择：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;各自部门的人在各自的代码仓库中开发调试各自的逻辑代码；&lt;/li&gt;
  &lt;li&gt;中台/平台部门在开发基础服务的同时，在业务部门的代码仓库里开发调试业务方的逻辑代码；&lt;/li&gt;
  &lt;li&gt;临时放在中台/平台部门的代码仓库里，基础服务完善后将业务方的逻辑代码迁出去；&lt;/li&gt;
  &lt;li&gt;写到中台/平台部门的代码仓库里，并且后期变动和维护也继续由中台/平台部门的人做。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;正常情况下，无论如何不可能也不应该选最后一种，这是最基本的部门定位和职责划分问题。然而，也许也会存在比较无奈的情形，比如：当不够强势的中台/平台部门遇到比较无赖的业务部门时。&lt;/p&gt;

&lt;p&gt;更糟糕的是，业务方的逻辑比较绕，开会讨论时已经各方自认为达成了共识，并按照自己的理解去开发了；但在测试时业务部门的人却说中台/平台部门的人实现得不对，业务逻辑有问题，甚至还推翻了之前开会讨论时所达成的共识……&lt;/p&gt;

&lt;p&gt;由中台/平台部门去维护业务部门的逻辑代码，这本身就是一件很扯蛋的事情！这对中台/平台部门来说几乎是无利可图，反而容易惹得一身腥！&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本文述说了我们在日常工作中常会遇到的几类问题，并针对它们各自十分简单且浅显地表达了我的观点。&lt;/p&gt;

&lt;p&gt;这几个问题虽然看起来五花八门，它们之间貌似没有什么关联，但正如文章的标题和开头说的一样——它们的背后都与「知识」有莫大关系！&lt;/p&gt;

&lt;p&gt;具体是什么将在下篇文章中揭晓，在那之前各位有兴趣的话可以先想下～😁&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2022 22:05:00 +0800</pubDate>
        <link>https://ourai.ws/posts/the-effect-of-knowledge-on-efficiency-part-1/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/the-effect-of-knowledge-on-efficiency-part-1/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
        <category>efficiency-improvement</category>
        
      </item>
    
      <item>
        <title>反思软件开发：生存策略</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;本文要谈的不是软件产品的生存策略，而是作为软件开发人员在团队中的生存问题——按理来说，这也像前两篇所讲的一样属于「人为因素」问题。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;团队类型&lt;/h2&gt;

&lt;p&gt;无论是不是与互联网相关，在一家靠提供软件及服务吃饭的公司里，只要具备一定规模了，就会分化出业务型团队和支撑型团队——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;分工细化的前提是流程环节比较复杂，并且因操作规范化程度不够或其他什么原因导致不能自动化，无法用机器取代人工，因而要拆分出子环节并找到对应的人去处理。&lt;/p&gt;
  &lt;footer&gt;欧雷《&lt;cite&gt;&lt;a href=&quot;/posts/rethink-software-production/&quot;&gt;反思软件开发：软件生产&lt;/a&gt;&lt;/cite&gt;》&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;业务型团队专注于「开源」，即「创收」，给公司的产品添砖加瓦以带来更多收入或流量；支撑型团队负责「节流」，也就是「提效」，让业务型团队的事情能够更快、更好、更有质量地落地。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工作价值&lt;/h2&gt;

&lt;p&gt;当被问起「你某段时间做了什么有价值的事情」时，会如何作答？&lt;/p&gt;

&lt;p&gt;相信有很多人会「自信满满」地说自己为业务带来了多少收入和流量；也有不少人「满心激动」地罗列自己为让业务更好落地做了多少贡献。&lt;/p&gt;

&lt;p&gt;正当你在向别人对自己做的一些自认为很有价值的事情大谈特谈时，对方问了一句：「你做这些的价值是什么？」你听了之后的第一感受很可能是不爽，并且疑惑：「这么有价值的事情都没看出来哪里有价值？」&lt;/p&gt;

&lt;p&gt;问的人不一定是恶意，有可能是你的表述没让他 get 到你所认为的价值点，也有可能是他虽然 get 到了你所认为的价值点但他认为没价值。&lt;/p&gt;

&lt;p&gt;前者是表达力和理解力的问题，这一般不是大问题，换个方式阐述；而后者则是价值观问题，这会影响站队，也就是与另外一个人或群体的匹配度、融合度。&lt;/p&gt;

&lt;p&gt;从上面的团队类型划分看，直觉上会认为做的事情只要符合团队的职责定位，能够让团队变得更好，就是有价值的。从「团队」这个整体来看也许是这样，但深入到团队内部去看呢？&lt;/p&gt;

&lt;p&gt;「有无价值」是「评价」，「评价」受「人的意志」影响，只要被「人的意志」影响就是「主观」的，无论这个「人的意志」是一两个人的还是很多个人的。&lt;/p&gt;

&lt;p&gt;所以，个人或团队做的事情是否有价值，最终还是靠直系上级的价值观去定性——做的事情的效果是立竿见影还是需要量变到质变，直系上级本人和其他同事或被支撑的团队认不认可。&lt;/p&gt;

&lt;p&gt;如果做的事情在比较长的时间后才体现出（巨大的）威力，那时你可能已经因为当初直系上级认定你做的事没价值而被裁了或自己走了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;生存困境&lt;/h2&gt;

&lt;p&gt;上文中的内容看起来可能觉得「很正常啊」、「这都没什么」，那下面开始说一些我觉得会让人沮丧的事实。&lt;/p&gt;

&lt;p&gt;总看我文章和了解我的人都知道，我的&lt;a href=&quot;/series/work-experience-until-thirty-two-years-old/&quot;&gt;从业经历&lt;/a&gt;是既在业务型团队干过也在支撑型团队待过，不管是在哪种类型的团队中，都积极主动地做了很多基建方面的工作。&lt;/p&gt;

&lt;p&gt;并且我也管理过小小团队，可以用不同的视角去尽可能全方位地阐述——&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;业务型前端&lt;/h3&gt;

&lt;p&gt;职业发展与成长的问题围绕着每个人，对于研发人员来说，对于在业务型团队中的前端工程师来说尤甚。&lt;/p&gt;

&lt;p&gt;在业务型团队中，前端工程师的主要职责就是完成产品需求，保障产品质量和上线时间。想封装 UI 组件库、脚手架、开发框架？不是有现成的开源项目和支撑型团队的项目吗？有重复造轮子的必要？需求做完了吗？能让团队赚钱吗？&lt;/p&gt;

&lt;p&gt;在业务型团队中，业务跟前端有什么关系吗？前端只是实施环节之一，前端工程师仅仅是个搬砖的，基本只能在实施的可行性、合理性上插插嘴，想砍需求或左右产品发展方向？呵呵呵……&lt;/p&gt;

&lt;p&gt;业务型团队的前端工程师，把代码写得没什么 bug 是「应该的」，这是「本职工作」。如果 bug 多，不仅会被合作的人投诉，还会被他们和上级认为能力不行。&lt;/p&gt;

&lt;p&gt;想做些基建工作去提高效率和减少质量问题？可以啊，但不能影响正常需求的开发。并且，做那些东西只能算是你的个人提升，因为没让团队赚更多钱啊，不算你「不务正业」就不错了，顶多在考评时认为你还算有上进心吧！&lt;/p&gt;

&lt;p&gt;这样看来，业务型团队中前端工程师的天花板实在是太低了，很容易就会遇到发展瓶颈。&lt;/p&gt;

&lt;p&gt;就算可以给团队中的所有项目代码做重构，等全部重构之后呢？做的这些重构会让你的上级和其他同事表扬你，赞赏你，更看重你，提高你的重要地位，让考评结果有利于升职加薪吗？若是不能，这是不是在自嗨，自我感动？&lt;/p&gt;

&lt;p&gt;如果还留在这样的体系中，摆在面前的基本就三条路：转到支撑型团队；做前端负责人；转做产品方向。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;支撑型前端&lt;/h3&gt;

&lt;p&gt;「支撑型团队」听起来有些高大上，给人以技术屌炸天的样子，使业务型团队的人心驰神往——在技术上相对来说是有些优越性，毕竟靠提供技术性服务吃饭，但也没那么夸张。&lt;/p&gt;

&lt;p&gt;在这里，「支撑型团队」是指那些提供通用开发工具等的公共技术部门，或提供像低代码平台、数据智能服务等门槛较高且相关资源集中的中台部门。&lt;/p&gt;

&lt;p&gt;进入支撑型团队之后，心想终于可以不用考虑那变幻莫测的业务而专心做自己喜欢的技术相关的事情了！&lt;/p&gt;

&lt;p&gt;真的是这样吗？真的是这样吗？？真的是这样吗？？？&lt;/p&gt;

&lt;p&gt;且不说前端工程师在有的支撑型团队中的处境实际跟在业务型团队一样，想想支撑型团队的业务方是谁？是业务型团队！&lt;/p&gt;

&lt;p&gt;如果做的技术工作不能满足或者满足不好业务型团队的需求，那么做的这些工作的价值和意义在哪里？在与业务型团队对接过程中出现问题，或者对接后他们业务上出现问题，没准还会被投诉。&lt;/p&gt;

&lt;p&gt;所以，纵然不在业务型团队，也会受到变幻莫测的业务的影响，即使会相对小些。&lt;/p&gt;

&lt;p&gt;就算相较于业务型团队能够将更多的心思放在技术上，天花板更高一点，瓶颈也会晚一点遇到，但又能做啥呢？&lt;/p&gt;

&lt;p&gt;工具库？UI 组件库？脚手架？开发框架？跨端方案？配置平台？监控平台？低代码平台？还有呢？&lt;/p&gt;

&lt;p&gt;这些东西，第一次做会觉得很新鲜很有收获，但上进的你如果在业务型团队中时就做过一遍了，或者换到了另外一家公司的支撑型团队做同类事情时，就很可能会发现没什么新鲜玩意，思路和做法都差不太多。&lt;/p&gt;

&lt;p&gt;那么，对于你来说，再做这些事情还有价值吗？有什么价值？&lt;/p&gt;

&lt;p&gt;当按照团队负责人的规划、指示按部就班地做那些东西时，你就像在业务型团队中一样仅仅是个搬砖的，没任何亮点，仍然是可替代性很强的螺丝钉，没什么区别。&lt;/p&gt;

&lt;p&gt;对于研发人员来说，对于在支撑型团队中的前端工程师来说，与在业务型团队中最大的不同就是自己的直接业务是技术，比在业务型团队中更懂自己的业务，更有可能去左右发展方向。&lt;/p&gt;

&lt;p&gt;要想左右方向，体现自己的价值，就得弄清楚团队的价值是什么，挖掘问题的根本原因，提出更好的、能解决真正问题的思路和可行方案，去说服团队的负责人和其他人以及业务方。&lt;/p&gt;

&lt;p&gt;支撑型团队的职责是大家所津津乐道的「提效」，也是大多数软件工程师的「本能」。&lt;/p&gt;

&lt;p&gt;然而，也许很多人没想到的是，引以为豪的「提效」在某些情形下却成了剥夺他人饭碗的「屠刀」，自己变成了「帮凶」。更为滑稽的是，自己可能就是被剥夺饭碗的那些人中的一个，变相「自杀」了……&lt;/p&gt;

&lt;p&gt;这背后的逻辑是——「提效」提高了产能，如果组织整体营收没有相应的增长，即那些业务型团队不够给力，就会劳动力过剩，进而加大组织运营成本；为了生存，组织会想办法减少开支，从而通过各种形式减员。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;前端负责人&lt;/h3&gt;

&lt;p&gt;有的人会天真地以为做了前端负责人就可以高枕无忧了……我不否认会存在这种情况，但更可能的是——&lt;/p&gt;

&lt;p&gt;不仅继续做着一线开发工作，即履行好普通业务型团队中前端工程师的职责，还要做团队管理、项目管理相关工作。&lt;/p&gt;

&lt;p&gt;自己部门里的事情还好说，当遇到跨部门协作时，责任划分和资源协调会相当麻烦。&lt;/p&gt;

&lt;p&gt;由于组织架构调整和人员变动造成的踢皮球现象时有发生，想找到个人咨询问题得兜兜转转绕上一大圈儿，很多时间过去了才可能问到，当然也有得不到答案的可能。&lt;/p&gt;

&lt;p&gt;自己或下属遇到对方不配合时，得自己跟对方 leader 或找自己上级跟对方 leader 的上级去沟通。这类事情就算是同部门也会遇到。&lt;/p&gt;

&lt;p&gt;作为业务型团队的前端负责人，按照人们的惯性思维，得要比其他的前端工程师更懂业务吧？但问题是，怎么去懂业务？&lt;/p&gt;

&lt;p&gt;要真的懂业务，首先得对那个领域感兴趣吧？不感兴趣的话如何做到真的懂业务？不喜欢数学的人把数学考高分让我膜拜下？&lt;/p&gt;

&lt;p&gt;那些说自己懂业务的人真的懂业务吗？？？能发现当前产品架构和商业模式中存在的问题并提出改进方案吗？？？&lt;/p&gt;

&lt;p&gt;作为业务型团队的前端负责人，按照人们的惯性思维，得要比其他的前端工程师更懂管理吧？但问题是，如何做好管理？&lt;/p&gt;

&lt;p&gt;「管理」是什么？是挥舞着手里的权力大刀逼迫就范？还是用各种技巧、手段画个大饼诱惑并套路他们？&lt;/p&gt;

&lt;p&gt;抱有这类想法甚至如此行动的人不懂「管理」，更别说懂人性了。真正的「管理」是创造舒服的环境，去激发他人工作的主动性，成就他们自己进而成就团队——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最理想的管理，应该能够激发出下级的热情，唤起风雨同舟的使命感、成就感，让他们觉得工作不只是维持生存、生活的手段，同时也是自我实现的方式，最终达到自驱动、自组织、自管理的效果；最理想的组织形态，是基于共同愿景的去中心化或弱中心化组织。&lt;/p&gt;
  &lt;footer&gt;欧雷《&lt;cite&gt;&lt;a href=&quot;/posts/human-factors-in-software-production-part-2/&quot;&gt;反思软件开发：人为因素（下）&lt;/a&gt;&lt;/cite&gt;》&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;先搞清楚「管理」到底是什么，再去想用什么样的方式去很好地表达那个词的深刻内涵——这实际是个社会学问题。&lt;/p&gt;

&lt;p&gt;不过说实话，这种中间角色，职级和拿的钱很可能跟其他人差不多不说，还容易做得上下不讨好——既背锅被上级训斥，又被下属说自己摆架子、不是人，委屈只能自己含泪吞下去。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;做产品方向&lt;/h3&gt;

&lt;p&gt;当要转做产品方向时，那就是对团队的业务领域很感兴趣，虽然不一定很了解。不了解可以去学习，但不感兴趣肯定就没辙了。&lt;/p&gt;

&lt;p&gt;做产品方向不一定就是当产品经理，业务线负责人、架构师等也都需要很懂业务，这几个都比较适合前端工程师去转型。&lt;/p&gt;

&lt;p&gt;其实，这条路的阻力还是挺大的。要补充大量缺失的知识并提升认知能力和思维方式自不用说，「愿景」或者说「共识」可能会成为最大的阻碍。&lt;/p&gt;

&lt;p&gt;当自己在产品的定位、功能和形态有比较强的观点时，虽然业务领域和团队的是一样的，但定位、目标等有可能相左。&lt;/p&gt;

&lt;p&gt;这时该咋办？说服团队负责人？不大可能。屈服顺从？一是自己会觉得不甘心、憋屈，二是又回到了一开始的问题——自己做的事情的价值在哪？&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;很多文章从正面、积极的方向去谈论前端工程师的职业发展与成长，就像人类社会总是倾向于去宣扬好的、正能量的事情，让人们吸上名为「安逸」、「快乐」的奶嘴儿，从而忘记自己身边危机四伏。&lt;/p&gt;

&lt;p&gt;本文试着从反面、消极的方向去探讨前端工程师在职业发展与成长中可能面临的问题、困境与矛盾，试图唤醒大家的危机意识。&lt;/p&gt;

&lt;p&gt;我并未像文章标题一样给出「生存策略」，而是指出「生存问题」希望大家去针对性地寻找适合自己的「生存策略」。&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jun 2022 13:53:07 +0800</pubDate>
        <link>https://ourai.ws/posts/survival-in-software-team/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/survival-in-software-team/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>peopleware-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
      </item>
    
      <item>
        <title>反思软件开发：人为因素（下）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;在《&lt;a href=&quot;/posts/human-factors-in-software-production-part-1/&quot;&gt;反思软件开发：人为因素（上）&lt;/a&gt;》中，我简单阐述了个人的局限性以及组织该有的意识形态中的主要方面。正所谓「思想决定行为」，组织在运作时成员的实际行为受那篇文章所述意识形态影响。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;沟通协作&lt;/h2&gt;

&lt;p&gt;既然要一起做「大事」，既然要合作，就避免不了分工协作和沟通交流。这部分基本是个人修养，组织中每个人的修养都提升一点点，综合起来的叠加效果是不容小觑的。&lt;/p&gt;

&lt;p&gt;下面以软件生产为例来聊聊我的相关观点——&lt;/p&gt;

&lt;p&gt;在之前写的《&lt;a href=&quot;/posts/rethink-software-production/&quot;&gt;反思软件开发：软件生产&lt;/a&gt;》中有提到软件生产中会有的一些分工，我们每个人都会承担其中的一个或多个。&lt;/p&gt;

&lt;p&gt;身处其位，要先搞清楚职责边界和所需资质，达到相关资质指标并在边界内尽职尽责，能够给出自己所处环节体现专业性的解决方案或建议。&lt;/p&gt;

&lt;p&gt;不是光做好自己这一摊子事儿就可以了，还需要熟悉上下游环节甚至是整条链路的相关内容，这样有助于大家劲儿往一处使，对齐并共享背景知识/上下文，减少沟通交流中的摩擦，把握事情走向，让自己做出更接地气更能解决问题的决策。&lt;/p&gt;

&lt;p&gt;把与自己沟通交流的对象当人看，要有最起码的尊重。每个人都有自己的立场和情绪，立场可以表达，但情绪要克制，以解决问题为导向，理性地交流、讨论。&lt;/p&gt;

&lt;p&gt;当立场有冲突时，先不要急着认为对方愚蠢且无知，不妨试着把自己看成如此，以「降低身段」替代「抢占高位」，尽可能地了解对方立场的形成原因，尝试去理解，向着符合共同利益或组织利益的方向促进共识。&lt;/p&gt;

&lt;p&gt;虽不能把别人当白痴，但可以当作小白来看待，尤其是跨工种交流时——对自己来说理所当然的事情，在他人看来很可能是陌生的，不明所以的。交流时尽量用通俗易懂的语言和符合直觉的符号——遵循惯例和最佳实践，避免生造概念，新瓶装旧酒。&lt;/p&gt;

&lt;p&gt;就拿编程来说，有的人犯懒或者炫技，就会写出一些让人摸不着头脑的代码——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;编程语言是程序员之间交流的另一种语言，关键字就是语言中的特定动词，变量/常量是名词或形容词，函数调用就是一句话，整个文件就是一篇文章。&lt;/p&gt;
  &lt;p&gt;合格的代码就是正常人的语文水平，看的过程不需要太多思考，靠直觉就懂其中含义。优雅的代码就是文笔优美的文章，不仅容易看懂，还舒服，并且能学到些什么。差的代码就像语文没学好或者精神错乱的人写出的，很容易让人摸不着头脑。&lt;/p&gt;
  &lt;p&gt;无论是写代码还是写文章，需考虑下读者的阅读体验。&lt;/p&gt;
  &lt;footer&gt;欧雷的&lt;cite&gt;&lt;a href=&quot;/murmurs/1fvcgnjk0/&quot;&gt;想法&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;综上所述，影响沟通协作流畅度的主要有两点，一个是思想态度，另一个就是信息差。关于后者，在《&lt;a href=&quot;/posts/communication-in-the-real-world/&quot;&gt;现实世界中的交流&lt;/a&gt;》中有更为深入的探讨。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;管理手段&lt;/h2&gt;

&lt;p&gt;虽然要「以人为本」，虽然要尊重个人的意志与需求，但放任自流组织迟早完蛋——任何事物都会朝着混乱的方向去发展，放到有自我意识的人身上，这种现象只会加剧；自然界中有自己保持秩序的规律，人类组织中需靠管理去维护秩序。&lt;/p&gt;

&lt;p&gt;我认为，「管理」是为了系统正常运转、熵减而进行资源调控，在「组织」这个语境中主要就是对人调控，这里的「人」既是普通员工又是管理者。因此，一个组织中不仅有上对下的管理，又会有下对上的投诉。&lt;/p&gt;

&lt;p&gt;管理者手里的权力代表责任，权力越大责任也就越大。权力是把双刃剑，虽说可以随时斩向下级，但不到万不得已最好不用，否则容易反向伤到自己。鉴于此，一般情况下管理者会利用各种指标工具去控制下级以满足自己的利益。&lt;/p&gt;

&lt;p&gt;上面的表达方式看似在贬，实则是个中立的表述，具体如何需看管理者使用指标工具的实际意图和度。做事要看成果，但也得看方法；要有套路，更得有良知。那些只抓绩效、指标的管理者不是合格的管理者，身在其位，不具其德。&lt;/p&gt;

&lt;p&gt;最理想的管理，应该能够激发出下级的热情，唤起风雨同舟的使命感、成就感，让他们觉得工作不只是维持生存、生活的手段，同时也是自我实现的方式，最终达到自驱动、自组织、自管理的效果；最理想的组织形态，是基于共同愿景的去中心化或弱中心化组织。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;利益之争&lt;/h2&gt;

&lt;p&gt;法学中有「应然」与「实然」，即「应该的、理想中的样子」与「实际的、现实中的样子」——在上文和&lt;a href=&quot;/posts/human-factors-in-software-production-part-1/&quot;&gt;上篇&lt;/a&gt;文章中所阐述的内容都算是「应然」，这就来大致说说「实然」是什么。&lt;/p&gt;

&lt;p&gt;人是自私的，做事会优先满足自己的利益，这里面有由基因遗传来的为了生存的动物本能成分，由人所构成的组织亦是如此。&lt;/p&gt;

&lt;p&gt;然而，组织架构就是人为地、公开地划分出多个利益集团，就像人员分工难以分出十分明确的职责边界一样，部门、小组之间也会出现职责内容重叠的部分，从而引起利益冲突。&lt;/p&gt;

&lt;p&gt;「坦率」是个难能可贵的品质，一个人很难做到真正的纯粹，他背负的越多越难纯粹，为了私人或所背负的利益费尽心机寻找借口，初心、真理什么的都靠边儿站！&lt;/p&gt;

&lt;p&gt;就拿技术选型这种事来说，什么「从部门乃至公司的技术长远发展角度着想」、「为了提高程序性能与提升团队效率和成员水平」的都是政治正确的掩护，实际重点考虑的是满足自己的利益，只要选的东西不是破绽百出，就能想到千百种理由让它落实——两个旗鼓相当的相反观点的持有者，没什么方法能够说服对方，除非一方用权势去压制另一方。&lt;/p&gt;

&lt;p&gt;实际情况就是，无论是个人与个人之间，个人与组织之间，还是组织与组织之间，通常优先考虑的是己方利益而非共同利益或（更高层面的）组织利益，相互之间产生摩擦，降低整体运转效率，熵增。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;提效的核心是组织自上而下遵照「以人为本」和「合作共赢」的思想去行动，形成相应的组织文化，单从方法论、工具层面去提效只是隔靴搔痒，治标不治本，很容易遇到瓶颈。&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jun 2022 21:40:35 +0800</pubDate>
        <link>https://ourai.ws/posts/human-factors-in-software-production-part-2/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/human-factors-in-software-production-part-2/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>peopleware-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
        <category>efficiency-improvement</category>
        
      </item>
    
      <item>
        <title>反思软件开发：人为因素（上）</title>
        
          <dc:creator>欧雷</dc:creator>
          <author>欧雷</author>
        
        <description>&lt;p&gt;本文内容（分上、下篇）实际上跟软件生产没什么关系，虽然在生产中方法论、工具等很重要，但更重要的是组织和人的问题，然而这类问题并不局限于软件生产。&lt;/p&gt;

&lt;p&gt;工具带来的提效只适用于无需智慧的机械性低价值重复劳动上，工具带来的效率提升是次要的，最先应该解决的是组织和人的效率问题——这是件非常难的事情。&lt;/p&gt;

&lt;p&gt;这个话题很大，在此仅仅阐述我对此粗浅的理解。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;个人的局限&lt;/h2&gt;

&lt;p&gt;之所以有组织的存在，是因为个人的能力是有限的，靠个人可以做成事，但都是些小事，要做大点的事就得依赖他人——&lt;/p&gt;

&lt;p&gt;「能力」是指「擅长的事」，也就是「技能」。&lt;/p&gt;

&lt;p&gt;绝大部分人只能擅长一两件事并在那方面成为所谓的「专家」，因为技能是需要长期训练、练习才能达到「擅长」的程度，要做成一件大点的事需要有不同「能力」的人合作，光靠一个人不太行。&lt;/p&gt;

&lt;p&gt;「能力」是指「精力」、「时间」和「效率」的总和。&lt;/p&gt;

&lt;p&gt;要做成一件事需要固定的工作量，并且往往要在某个时间期限之内做完才有效，也就是「窗口期」——过了这个村就没这店了。&lt;/p&gt;

&lt;p&gt;最小工作量固定，deadline 已知，接下来就是资源调配问题了。&lt;/p&gt;

&lt;p&gt;一般来说，除非有绝对的把握，否则一个人很可能无法完成，因为人们总是低估一件事的复杂性，即便看起来是很简单的一件事——&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;侯世达定律：做事所花费的时间总是比你预期的要长，即使你的预期中考虑了侯世达定律。&lt;/p&gt;
  &lt;footer&gt;侯世达《&lt;cite&gt;&lt;a href=&quot;https://book.douban.com/subject/1291204/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;哥德尔、艾舍尔、巴赫：集异璧之大成&lt;/a&gt;&lt;/cite&gt;》&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;除去事情自带的复杂度，参与其中的人本身就有很多不确定因素——姨妈了，要陪产，家里有事，心情不好，诸如此类。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;意识形态&lt;/h2&gt;

&lt;p&gt;组织中人的思想和认知是影响整体效率的重中之重，企业所谓的基因、文化和价值观等就是这个组织意识形态的体现。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;以人为本&lt;/h3&gt;

&lt;p&gt;组织是由人构成的系统，要想正常且高效地运转，就要控制好作为构成要素的每个人——理解「人」，了解他们，用好他们。&lt;/p&gt;

&lt;p&gt;作为一起做某事的一份子，他们虽然是资源，但他们是「人」，而不是「工具」和「牲口」，理应被尊重，被理解，被照顾，被用心对待——组织需要人文关怀。&lt;/p&gt;

&lt;p&gt;除了组织的创建者（们），其他人加入的原因无非是为了生活和在想要发展的方向上锻炼自己。这些人的基本诉求，组织的领导者们应当重视起来，给予他们与能力及创造的价值相匹配的回报，而非想方设法地去在各方面进行压榨。&lt;/p&gt;

&lt;p&gt;除了组织的创建者（们），其他人都是打工的，即使有层级之别，但相互之间依然是平等的。别被自己的头衔和手里那点儿「权力」所迷惑，掉进官僚主义的陷阱，不然自己可能一时爽了，但影响了整个组织的氛围，降低组织效率。&lt;/p&gt;

&lt;p&gt;纵然组织可以是一个无情冰冷的机器，但若构成组织的每个人都感受到了组织的温暖，他们会抱着更为积极的态度去工作，从而使整个组织拥有良好的氛围，进而提升组织效率，毕竟人是有感情的。&lt;/p&gt;

&lt;p&gt;人是构成组织这个系统的要素，人心则是影响组织效率的最重要的因素。&lt;/p&gt;

&lt;p&gt;愚蠢的组织会为了创建者（们）的利益用尽手段去压榨；聪明的组织即使牺牲点创建者（们）的利益也要尽可能对其他人公平；而「精明」的组织则会保护占据核心地位的领导层，其他人就是螺丝钉，不行就换。&lt;/p&gt;

&lt;p&gt;为什么把「精明」加上引号？因为看起来聪明，实则愚蠢——助长官僚主义之风，制造阶级矛盾，不把占据组织大多数的民众的利益当回事。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;合作共赢&lt;/h3&gt;

&lt;p&gt;人是自私的，做事会优先满足自己的利益，由人构成的组织更是如此，这都无可厚非。但是，如果只想着满足自己的利益，甚至故意去损害他人的利益，那么自己的道路会越走越窄，很难做成大事。&lt;/p&gt;

&lt;p&gt;因此，无论是个人与个人之间，个人与组织之间，还是组织与组织之间，要想做成事或使所处组织变得高效，需要有合作意识。&lt;/p&gt;

&lt;p&gt;合作的前提是参与者之间要有共同的「大目标」——各自「小目标」的交点，也就是利益结合点。如果一件事对参与者中的一个或几个人来说收效甚微，那他们不会选择合作。&lt;/p&gt;

&lt;p&gt;鉴于此，我认为所谓的「合作意识」主要是指两方面：一是了解个人的局限，知道要与他人构成组织协同工作才能做成大事；二是懂得与他人分享共同取得的成果，尽量去满足合作者的利益，有时甚至要为了自己更大的潜在利益而牺牲眼前利益。&lt;/p&gt;

&lt;p&gt;人与人之间的绝大部分关系实质上都是合作关系，无论是员工与企业、婚姻还是朋友等，应该努力共赢，将各自的利益最大化，而非剥削、压榨这类零和博弈。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;组织是由个人所构成，虽然组织的意识与智慧凌驾于个人之上，但不能忽视并忘记个人的意志与需求，这相当于否定组织的根本。&lt;/p&gt;

&lt;p&gt;组织是由个人所构成，因而组织的实际运作会像人一样由其思想、意识形态所决定——本篇内容着重讲述意识形态的主要方面，下篇将说明该如何行动。&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2022 20:36:03 +0800</pubDate>
        <link>https://ourai.ws/posts/human-factors-in-software-production-part-1/</link>
        <guid isPermaLink="true">https://ourai.ws/posts/human-factors-in-software-production-part-1/</guid>
        
        <category>web-development</category>
        
        
        <category>software-engineering</category>
        
        <category>peopleware-engineering</category>
        
        <category>frontend-web-development</category>
        
        <category>frontend-engineering</category>
        
        <category>efficiency-improvement</category>
        
      </item>
    
  </channel>
</rss>
